** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
ref: https://github.com/Kartonagnick/sqlitedb/blob/master/depends/sqlite3/include/sqlite3ext.h

NOW YOU TELL ME 'kind' one, IS THIS NOT THE MOST WONDERFUL PUREHEART "BLESSING" EVER AS THE EMBODIMENT OF THE WAY OF TRUTH WITH MOST PUREHEART IN LIFE ..?

WHY YES Yes yes it is ... SHOQQINQ ... just a shQcker! ... the same 'kind' 'intelligent' 'blessed' one giving 'her' 'his' GOOD Q.I.D. GOOD K.I.D. incredible code that standardizes SQL across all platforms in a WAY that makes me feel like ... ... keep on with the 'FORCE' stroke ... with a really, Really, REALLY FAST, BUT OH LA LA SO LONG-LASTING, RELATIVELY PERMANENT EVEN, GOOD DEEP, SENSATIONAL, POWERFUL, BEAUTIFUL K.I.S.S. ... is the same beLOVEd 'funny but TRUTHful most intelligent most PUREHEART 'one'(s) in TRUTH who are giving their 'blessing' truly 'leading by example' showing the 'WAY' by 'walking the talk' ... WORD ..? Blessed are the PUREHEART for they shall see G_D. Matthew 5:8 ... WORD.

... so my beLOVEd do please LEARN C ANUTECH https://www.bitchute.com/video/5SYLyKOP2Z7E/ 
... LEARN C++ ANUTECH https://www.bitchute.com/video/ALPsplR1MNo1/

... and learning what the best among us with their most intelligent of all hardware electonics engineers, assembly language developers, game developers, real time developers, big data containers, most serious ones amongst us I assure in so many cultures speaking so many 'tongues' but all in TRUTH with most PUREHEART unwilling to get 'wealthy' and see their 'neighbors they LOVE' all still poor ... no No NO this cannot be ... we must all LIFT ONE ANOTHER UP A NEW WAY for tomorrow must be ... I eat once per day ... I need little ... I AM much happier giving aWAY what I have to use to help other PUREHEART in TRUTH DIRECTLY HUGGING HOLDING LOVING THEM CRYING WITH THEM PRAYING WITH THEM DOING WHATEVER THEY NEED FOR A WHILE TO MAKE SURE THEY ARE NOW "FINE" AND "HAPPY" AS THEY DESERVE not just me I don't want to suffer I like the basics and I enjoy high Quality H2O and most nutrious DARK REALLY DARK DARKER THAN THAT DARK CHOCOLATE 'cream' I don't need too many got situps and pushups and a 1 1/2 mile run to remember so not too much 'cream' but 'cream' is GOOD for 'motivation' ... you know what I AM getting at, RIGHT ..? okay hotshot ... NO ONE IS THAT "TOUGH" AND "BAD ASS" ACTING AFTER THEIR "PT TEST" "Physical Training Test" I got an outstanding on my 'pt tests' for years every 6 months ... I was so 'excited' about 'pt' GOOD FOR YOU GOOD FOR ME that I 'volunteered' and you know in 'the nav' there is a SICKENING FILTHY OLD STANK NAVY saying that goes like this:

All,

I AM 'thinking' something like this:

http://SOLAR2D.com a GOOD K.I.D. Vlad Svoka most intellectual one 'ancient Slavic' 'lover of ancient Han' 'lover of ancient MonGul' 'lover of ancient HanGul' EMBODIMENT OF G_D'S LOVE FOR US ALL seen clearly by 'the fruit of his LIFE's tree' grown in 'fertile, safe, nutritious, healthy, firm, foundation soil' by those who LOVED him before they ever really got to know him when he was just an infant a gentle baby man needing LOVE and he was given LOVE and today's his TREE OF LIFE grows and prospers and rewards all of us most noble most honorable 'HEROIC' "RUSSIAN" "CANADIAN" 'SON' SHINING MUCH 'BLESSED' 'PUREHEART' 'LIGHT' 'SOLAR' 'MOON' 'LUA' https://translate.google.com/?sl=en&tl=pt&text=MOON&op=translate IN TRUTH with a most PUREHEART giving 'caring for the special coffee farmers who must grow their berries in the shade of other trees and who take GOOD care of G_D's lands and animals and plants and trees around their special berry growing coffee berry producing 'cool' 'gift from G_D' they use to take care of us all with their delicious blends of PUREHEART NATURAL COFFEE flavors to be mixed certainly by more than a few CREAM lovers with some smooth creamy CREAMs of their flavor desire at the moment 

and

http://www.LOVE2D.org/

with 'modern miracle' collection of OLD SCHOOL PS1 PS2 NINTENDO NINTENDO 64 ATARI arcade games that JACKSON AND MATT COULD EASILY EMBED INTO THEIR MOST AMAZING AND SO VERY "COLORFUL" AND FULL OF "LIGHT" AND "JOY" "HAND-BUILT' "CUSTOMIZABLE" "AFFORDABLE" PCs BUILDS LIKE THE ONE OF MINE THAT YOU GAVE ME A MOST INCREDIBLE "GIFT" https://pcbros.tech/ https://www.toastybros.tech/ so USING RECALLBOX.com JACKSON AND MATT CAN TURN THOSE OLD ARCADE GAMES THE REAL DEAL CONSOLES AND THE REAL DEAL "DRIVING" SITTING DOWN LIKE THE OLD SCHOOL RACING GAMES AND LOW AND BEHOLD JAKE GORDON JUST BECAME JEFF GORDON son so since Jackson and Matt JUST PURCHASED THOSE ARCADE GAMES, LIKE 6 OF THEM for $3000 as you told me earlier, please DO LET HIM KNOW IMMEDIATELY ABOUT:

http://www.recalbox.com/ ... 

and on the other side of the more technical code front their are just more and More and MORE AMAZING "GIVING" "INTELLECTUAL" "KIND" "LOVING" PUREHEART SOFTWARE AND HARDWARE 'engineers' hard workers with most PUREHEART in TRUTH that you'll find their 'freedom-seeking' 'liberty-loving' inspirational work a most 'blessed' breath of 'fresh air' kind beLOVEd one I LOVE:

https://www.solar2dplugins.com/

https://docs.coronalabs.com/api/library/widget/

https://docs.coronalabs.com/api/library/network/request.html

https://docs.coronalabs.com/api/library/sqlite3/index.html

https://stackoverflow.com/search?q=solar2d

https://stackoverflow.com/questions/18707756/scripting-language-for-code-blocks

https://gamedev.stackexchange.com/questions/135458/combining-and-drawing-2d-lights-in-opengl

http://www.squirrel-lang.org/

https://www.lua.org/

http://www.love2d.org/

https://github.com/topics/lua-bindings?l=c

LOTS OF "LOVE" IN THE AIR YOU CAN FEEL IT EVERYWHERE ... https://www.youtube.com/watch?v=4cIUylAUbwM ... HIT IT ... https://www.youtube.com/watch?v=sysgZabVlZw ... I AM the discQ duQQ ... went to party the other night ... all the ladies were treating me RIGHT ... how in the world could I keep my seat ... all of a sudden I began to 'change' ... aaah get down mama ... discQ duQQ ... got to have you mama ... try yQur luQQ ... dQn't be a QluQQ ... Qh mama shaQe yQur tail feathers ... there's nQ stQppinQ a duQQ and his beaQ ... discQ duQQ ...

Never
Again
Volunteer
Yourself

WHICH IS 100% A LIE AND IS UPSIDE DOWN AND BACKWARDS beCAUSE in 'REAL LIFE' I VOLUNTEERED ALL THE TIME AND EVERYONE APPRECIATED IT!

SO what's the WORD 'bird' you see 'bird' is a GOOD 'thing' bo' and bo' you don't want me to call you 'Otis' beCAUSE then you would be a 'shitbird' 'Otis' not a GOOD 'bird' bo' ... can you 'feel' me ..? 

... so what are the 'standards' in 'the nav' John E Boy, baby, let me know what I can use as a common 'standard' guage of my 'pt test' readiness son spit it out let me know the GOOD WORD 'bird' NOW 'bird' RIGHT FUQQINQ NOW 'bird' what's UP pup ..?

Well it depends but, in short, an old man 40-49, get 30 seconds less than a young 'more-important-than-ANYTHING-EVER-baby-making-hip-sensitive' 20-29 woman to finish the 'pt test' but remember 'soft legs' PUREHEART 'kind' 'nurturing' 'loving' 'warm' 'gentle' 'wonderful' 'intellectual' 'funny' 'playful' most PUREHEART 'crossed legs' are 'special' and MUST ALWAYS BE LIFTED UP and EVERYONE FINISHES THE RACE so a faster younger or older woman will alWAYs turn arouand when she finishes 'fast' and 'runs back to help others, man or woman, any 'one' struggling she will help and the next 'fast' runner behind her will help the next 'one' after the 'one' she is helping who needs her or his 'help' to stay 'motivated' and do not give up and finish the race and know WE ALL ARE DEPENDING ON EACH OF US as is the 'real TRUTH in LIFE' as you might 'imagine' and be most serious in your PUREHEART a little chinese girl very poor in a village having something 'very special' a 'very special blessing' inside of 'her' that can either grow or not grow depending upon how 'she' is 'helped' in 'her LIFE' the same is true of a little boy in africa so poor but having a 'special' blessing as an 'easter egg' hidden by the ONLY REAL CREATOR "I AM" G_D ALMIGHTY CREATOR OF creators PROGRAMMER of programmers who like 'programmers' here like John E Boy, baby, G_D gets bored when G_D finishes G_D's work and G_D has 'eternity' so G_D has so much time and G_D is so fast and yes of course G_D changes G_D's mind all the time and tries every imaginable combination so unimaginably 'CREATIVE' IS G_D that all kinds of beings are 'creations' of G_D not just 'man' or 'monkey' or 'bird' or 'algae' or 'coral reef' or 'whale' or 'elephant' or 'lion' or 'cow' or 'water' or 'oxygen' or 'hyrdrogen' or 'plasma' or 'iron soft ferrous natural magnetic iron like the iron in your circulating blood stream magnetic-field generator with tiny magnetic iron particles moving around in your water-filled-feeling-saving-transmitting-receiving-transceiver-h20-molecules but THE POWER OF YOUR INTENTIONS - THE RICE EXPERIMENT by TRUTHstreamMedia.com probably doesn't come to mind or BruceLipton.com CELLULAR EPIDEMIOLOGIST TELLING YOU THE ENVIRONMENT EVERYTHING ALIVE IS LITERALLY SENDING YOUR CELLS MESSAGES but just move along Move Along MOVE ALONG ... make sure  you are keeping GOOD CARE OF YOUR INSIDE "WATER" ATTITUDE "FEELINGS" "STORED" IN A MOST NON-VOLATILE "LONG-LASTING" "MEMORABLE" "PERSISTENT" "REMOTELY ACCEISSIBLE AND TRULY PERMANENTLY SAVEABLE STOREABLE 'STYLE'" 'info' of all of each of our 'thoughts' our 'aurah' our 'intent' ... so when you think about why GOOD K.I.D.s LIFT UP GOOD Q.I.D.s GOOD Knights In Development LIFT UP GOOD Queens In Development now you know some 'soft crossed legs' are really fast so be cool and be kind and LIFT UP ALL WOMEN AND TREAT ALL WOMEN even a 'real woman' acting like a 'man' treat her like a real 'woman' and tell her she is 'beautiful' and let her know any GOOD PUREHEART 'real man' in TRUTH would LOVE to be with 'her' 'soft legs' PUREHEART and just make sure to not be shy and let her know eye to eye that you are a most serious one that you are TRUTH that you are PUREHEART ... I SEE YOU ... I AM most proud of you my beLOVEd GOOD K.I.D.s who 'play' but 'down deep' really LOVE and will 'give our lives for soft legs PUREHEART and her baby ladies and gentle baby men for we hold these TRUTHs to be self-evident that ancient Han showed us the WAY in TRUTH by placing most PUREHEART 'crossed legs' to remind us now and foreverore more of what is worth fighting and dying for to protect and preserve for listening to G_D cry tears of joy and pat 'us' on our backs back 'home' is 'worth it' as G_D 'sees' 'hears' 'feels' our every MOVE our every WORD our every THOUGHT and INTENT G_D KNOWS AND WHEN WE ARE MOST PUREHEART it tickles G_D and G_D cries and HEAVEN SINGS and when G_D laughs the whole of HEAVEN shakes and everyone feels like taking a 'poop' and a 'pee' at the same exact time scared to death from the 'most loud laughing fuQQinQ ever Ever EVER G_D IS SO HILARIOUS that you are both 'initially scared' then 'overwhelmingly happy and excited and have to pee more now' oh HEAVEN is 'fun' ... see you back 'home' ... PROMISE ... 

MAMA and PAPA were laying in bed ... mama rolled over and this is what she said "GIVE ME SOME! PT! GOOD FOR YOU! GOOD FOR ME! GIVE ME SOME! PT! GOOD FOR YOU! GOOD FOR ME!" ...

... "the nav's" physical training 'readiness' 'standard' is essentially something like this coming from 'one' "IN THE KNOW" "kind" one:

1 1/2 MILE RUN - 7:00 - 7:30 that is seven to seven and a half minutes to run one and a half miles by our 'fastest' generally speaking ...
2 MINUTES AS MANY 'pushups' as you can do = you get 100 points if you do 67 pushups in 2 minutes our 'strongest' can do 100+ in 2 minutes ...
2 MINUTES AS MANY 'situps' as you can do = you get 1 point per situp for a maximum of 100 points for 100 situps our '6-packed' can do 117+ in 2 minutes ...

1 1/2 MILE RUN - 9:30 - 12:30 that is nine and a half minutes to eleven and a half minutes were my best and worst times generally and I alWAYs earned an overall OUTSTANDING on my 'pt test' for a SUSTAINED SUPERIOR PERFORMER as 'the nav' refers to 'us' ...
2 MINUTES AS MANY 'pushups' as you can do = you get 100 points while in TRUTH I usually got 59-67 pushups in 2 minutes and again still alWAYs got an OVERALL OUTSTANDING so if got only 59 pushups feeling 'relatively weak that test day' I TRIED TO RUN FASTER beCAUSE 'the run' really counts a lot to the OVERALL SCORE generally speaking beCAUSE 'the run wears you out' and 'turns your RIGHTEOUS RAGE into WELL-VENTED WELL THOUGHTFUL APPROACHES TO WIN THE SPIRITUAL WAR IN THE END young grasshopper ... love you too .. don't forget ...
2 MINUTES AS MANY 'situps' as you can do = you get 1 point per situp for a maximum of 100 points for 100 situps with most PUREHEART in TRUTH I usually got from 90-100 situps as even now I can 50 without stopping and that is the key to get as many 'situps' without stopping as you can if you can get to 70 of the 100 that is really helpful on getting to the 100 beCAUSE the first 70 will take just 1 minute but the next 30 are slower and hurt more and more as you get to 100 or more in 2 minutes the same is TRUTH for pushups do as many as you can I can do 50 in a row now in about 1:17 but the other 43 seconds I will be shaking and looking 'rough' and 'weaker and weaker' as I try to get to 67 pushups in 2 minutes just as I AM wobbling and 'weaker and weaker' as I approach 100 situps in 2 minutes ... the USMC 'jar' heads run 3 miles TWICE 'the nav' beCAUSE well you know '...he goes dancing across the water, man ... what a Qiller ..?' and army airborne like my thick-legged brother J.E.S. James Edward Segrest IV 82nd Airborne Wiley The Coyote smoking 'the ganja' and 'Airborne' 'tatoo' sporting LOVER OF SOFT LEGS most adventurous yet most serious one like me yet different but when around J.E.S. I AM usually the 'student' not the 'teacher' as in TRUTH J.E.S. and I though J.E.S. and I are both older than 'Erin, when J.E.S. and I are 'hanging around' or 'working with' my youngest brother, Richard Erin Flaherty, then 'Erin' is usually the 'teacher' and J.E.S. and I are usually the 'students' for my beLOVEd baby brother is a most skilled 'carpenter' 'jack of all trades' 'mechanic' 'electrician' 'plumber' 'musical instrument of any type or kind hearing and playing nearly instantly' 'special' 'kind' kind of most playful yet most serious most hardworking most innovative most precise most humble cool hilarious most PUREHEART most caring STRONG 'tough' 'fun' TRUE BROTHER ... WORD.

HOPE THAT HELPS YOU "GET SOME" AND "STAY IN SHAPE" ... 'nav style' ... the more you know ... the more you realize you can do anything you want to do and you aren't nearly as far aWAY from what you want as you think once you really get seriously about going to 'get you some' soft legs PUREHEART GOOD Q.I.D.s strong gentle kind PUREHEART GOOD K.I.D.s ... 'feel' me ..?

... and now on to the beLOVEd 'blessing' ... 
https://github.com/Kartonagnick/sqlitedb/blob/master/depends/sqlite3/include/sqlite3ext.h

/*
** 2006 June 7
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This header file defines the SQLite interface for use by
** shared libraries that want to be imported as extensions into
** an SQLite instance.  Shared libraries that intend to be loaded
** as extensions by SQLite should #include this file instead of 
** sqlite3.h.
*/
#ifndef SQLITE3EXT_H
#define SQLITE3EXT_H
#include "sqlite3.h"

/*
** The following structure holds pointers to all of the SQLite API
** routines.
**
** WARNING:  In order to maintain backwards compatibility, add new
** interfaces to the end of this structure only.  If you insert new
** interfaces in the middle of this structure, then older different
** versions of SQLite will not be able to load each other's shared
** libraries!
*/
struct sqlite3_api_routines {
  void * (*aggregate_context)(sqlite3_context*,int nBytes);
  int  (*aggregate_count)(sqlite3_context*);
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));
  int  (*bind_double)(sqlite3_stmt*,int,double);
  int  (*bind_int)(sqlite3_stmt*,int,int);
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);
  int  (*bind_null)(sqlite3_stmt*,int);
  int  (*bind_parameter_count)(sqlite3_stmt*);
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);
  int  (*busy_timeout)(sqlite3*,int ms);
  int  (*changes)(sqlite3*);
  int  (*close)(sqlite3*);
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,
                           int eTextRep,const char*));
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,
                             int eTextRep,const void*));
  const void * (*column_blob)(sqlite3_stmt*,int iCol);
  int  (*column_bytes)(sqlite3_stmt*,int iCol);
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);
  int  (*column_count)(sqlite3_stmt*pStmt);
  const char * (*column_database_name)(sqlite3_stmt*,int);
  const void * (*column_database_name16)(sqlite3_stmt*,int);
  const char * (*column_decltype)(sqlite3_stmt*,int i);
  const void * (*column_decltype16)(sqlite3_stmt*,int);
  double  (*column_double)(sqlite3_stmt*,int iCol);
  int  (*column_int)(sqlite3_stmt*,int iCol);
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);
  const char * (*column_name)(sqlite3_stmt*,int);
  const void * (*column_name16)(sqlite3_stmt*,int);
  const char * (*column_origin_name)(sqlite3_stmt*,int);
  const void * (*column_origin_name16)(sqlite3_stmt*,int);
  const char * (*column_table_name)(sqlite3_stmt*,int);
  const void * (*column_table_name16)(sqlite3_stmt*,int);
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);
  const void * (*column_text16)(sqlite3_stmt*,int iCol);
  int  (*column_type)(sqlite3_stmt*,int iCol);
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);
  int  (*complete)(const char*sql);
  int  (*complete16)(const void*sql);
  int  (*create_collation)(sqlite3*,const char*,int,void*,
                           int(*)(void*,int,const void*,int,const void*));
  int  (*create_collation16)(sqlite3*,const void*,int,void*,
                             int(*)(void*,int,const void*,int,const void*));
  int  (*create_function)(sqlite3*,const char*,int,int,void*,
                          void (*xFunc)(sqlite3_context*,int,sqlite3_value**),
                          void (*xStep)(sqlite3_context*,int,sqlite3_value**),
                          void (*xFinal)(sqlite3_context*));
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,
                            void (*xFunc)(sqlite3_context*,int,sqlite3_value**),
                            void (*xStep)(sqlite3_context*,int,sqlite3_value**),
                            void (*xFinal)(sqlite3_context*));
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);
  int  (*data_count)(sqlite3_stmt*pStmt);
  sqlite3 * (*db_handle)(sqlite3_stmt*);
  int (*declare_vtab)(sqlite3*,const char*);
  int  (*enable_shared_cache)(int);
  int  (*errcode)(sqlite3*db);
  const char * (*errmsg)(sqlite3*);
  const void * (*errmsg16)(sqlite3*);
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);
  int  (*expired)(sqlite3_stmt*);
  int  (*finalize)(sqlite3_stmt*pStmt);
  void  (*free)(void*);
  void  (*free_table)(char**result);
  int  (*get_autocommit)(sqlite3*);
  void * (*get_auxdata)(sqlite3_context*,int);
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);
  int  (*global_recover)(void);
  void  (*interruptx)(sqlite3*);
  sqlite_int64  (*last_insert_rowid)(sqlite3*);
  const char * (*libversion)(void);
  int  (*libversion_number)(void);
  void *(*malloc)(int);
  char * (*mprintf)(const char*,...);
  int  (*open)(const char*,sqlite3**);
  int  (*open16)(const void*,sqlite3**);
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);
  void *(*realloc)(void*,int);
  int  (*reset)(sqlite3_stmt*pStmt);
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));
  void  (*result_double)(sqlite3_context*,double);
  void  (*result_error)(sqlite3_context*,const char*,int);
  void  (*result_error16)(sqlite3_context*,const void*,int);
  void  (*result_int)(sqlite3_context*,int);
  void  (*result_int64)(sqlite3_context*,sqlite_int64);
  void  (*result_null)(sqlite3_context*);
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));
  void  (*result_value)(sqlite3_context*,sqlite3_value*);
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,
                         const char*,const char*),void*);
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));
  char * (*xsnprintf)(int,char*,const char*,...);
  int  (*step)(sqlite3_stmt*);
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,
                                char const**,char const**,int*,int*,int*);
  void  (*thread_cleanup)(void);
  int  (*total_changes)(sqlite3*);
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,
                                         sqlite_int64),void*);
  void * (*user_data)(sqlite3_context*);
  const void * (*value_blob)(sqlite3_value*);
  int  (*value_bytes)(sqlite3_value*);
  int  (*value_bytes16)(sqlite3_value*);
  double  (*value_double)(sqlite3_value*);
  int  (*value_int)(sqlite3_value*);
  sqlite_int64  (*value_int64)(sqlite3_value*);
  int  (*value_numeric_type)(sqlite3_value*);
  const unsigned char * (*value_text)(sqlite3_value*);
  const void * (*value_text16)(sqlite3_value*);
  const void * (*value_text16be)(sqlite3_value*);
  const void * (*value_text16le)(sqlite3_value*);
  int  (*value_type)(sqlite3_value*);
  char *(*vmprintf)(const char*,va_list);
  /* Added ??? */
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);
  /* Added by 3.3.13 */
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);
  int (*clear_bindings)(sqlite3_stmt*);
  /* Added by 3.4.1 */
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,
                          void (*xDestroy)(void *));
  /* Added by 3.5.0 */
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);
  int (*blob_bytes)(sqlite3_blob*);
  int (*blob_close)(sqlite3_blob*);
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,
                   int,sqlite3_blob**);
  int (*blob_read)(sqlite3_blob*,void*,int,int);
  int (*blob_write)(sqlite3_blob*,const void*,int,int);
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,
                             int(*)(void*,int,const void*,int,const void*),
                             void(*)(void*));
  int (*file_control)(sqlite3*,const char*,int,void*);
  sqlite3_int64 (*memory_highwater)(int);
  sqlite3_int64 (*memory_used)(void);
  sqlite3_mutex *(*mutex_alloc)(int);
  void (*mutex_enter)(sqlite3_mutex*);
  void (*mutex_free)(sqlite3_mutex*);
  void (*mutex_leave)(sqlite3_mutex*);
  int (*mutex_try)(sqlite3_mutex*);
  int (*open_v2)(const char*,sqlite3**,int,const char*);
  int (*release_memory)(int);
  void (*result_error_nomem)(sqlite3_context*);
  void (*result_error_toobig)(sqlite3_context*);
  int (*sleep)(int);
  void (*soft_heap_limit)(int);
  sqlite3_vfs *(*vfs_find)(const char*);
  int (*vfs_register)(sqlite3_vfs*,int);
  int (*vfs_unregister)(sqlite3_vfs*);
  int (*xthreadsafe)(void);
  void (*result_zeroblob)(sqlite3_context*,int);
  void (*result_error_code)(sqlite3_context*,int);
  int (*test_control)(int, ...);
  void (*randomness)(int,void*);
  sqlite3 *(*context_db_handle)(sqlite3_context*);
  int (*extended_result_codes)(sqlite3*,int);
  int (*limit)(sqlite3*,int,int);
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);
  const char *(*sql)(sqlite3_stmt*);
  int (*status)(int,int*,int*,int);
  int (*backup_finish)(sqlite3_backup*);
  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);
  int (*backup_pagecount)(sqlite3_backup*);
  int (*backup_remaining)(sqlite3_backup*);
  int (*backup_step)(sqlite3_backup*,int);
  const char *(*compileoption_get)(int);
  int (*compileoption_used)(const char*);
  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,
                            void (*xFunc)(sqlite3_context*,int,sqlite3_value**),
                            void (*xStep)(sqlite3_context*,int,sqlite3_value**),
                            void (*xFinal)(sqlite3_context*),
                            void(*xDestroy)(void*));
  int (*db_config)(sqlite3*,int,...);
  sqlite3_mutex *(*db_mutex)(sqlite3*);
  int (*db_status)(sqlite3*,int,int*,int*,int);
  int (*extended_errcode)(sqlite3*);
  void (*log)(int,const char*,...);
  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);
  const char *(*sourceid)(void);
  int (*stmt_status)(sqlite3_stmt*,int,int);
  int (*strnicmp)(const char*,const char*,int);
  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);
  int (*wal_autocheckpoint)(sqlite3*,int);
  int (*wal_checkpoint)(sqlite3*,const char*);
  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);
  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);
  int (*vtab_config)(sqlite3*,int op,...);
  int (*vtab_on_conflict)(sqlite3*);
  /* Version 3.7.16 and later */
  int (*close_v2)(sqlite3*);
  const char *(*db_filename)(sqlite3*,const char*);
  int (*db_readonly)(sqlite3*,const char*);
  int (*db_release_memory)(sqlite3*);
  const char *(*errstr)(int);
  int (*stmt_busy)(sqlite3_stmt*);
  int (*stmt_readonly)(sqlite3_stmt*);
  int (*stricmp)(const char*,const char*);
  int (*uri_boolean)(const char*,const char*,int);
  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);
  const char *(*uri_parameter)(const char*,const char*);
  char *(*xvsnprintf)(int,char*,const char*,va_list);
  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);
  /* Version 3.8.7 and later */
  int (*auto_extension)(void(*)(void));
  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,
                     void(*)(void*));
  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,
                      void(*)(void*),unsigned char);
  int (*cancel_auto_extension)(void(*)(void));
  int (*load_extension)(sqlite3*,const char*,const char*,char**);
  void *(*malloc64)(sqlite3_uint64);
  sqlite3_uint64 (*msize)(void*);
  void *(*realloc64)(void*,sqlite3_uint64);
  void (*reset_auto_extension)(void);
  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,
                        void(*)(void*));
  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,
                         void(*)(void*), unsigned char);
  int (*strglob)(const char*,const char*);
  /* Version 3.8.11 and later */
  sqlite3_value *(*value_dup)(const sqlite3_value*);
  void (*value_free)(sqlite3_value*);
  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);
  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);
  /* Version 3.9.0 and later */
  unsigned int (*value_subtype)(sqlite3_value*);
  void (*result_subtype)(sqlite3_context*,unsigned int);
  /* Version 3.10.0 and later */
  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);
  int (*strlike)(const char*,const char*,unsigned int);
  int (*db_cacheflush)(sqlite3*);
  /* Version 3.12.0 and later */
  int (*system_errno)(sqlite3*);
  /* Version 3.14.0 and later */
  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);
  char *(*expanded_sql)(sqlite3_stmt*);
  /* Version 3.18.0 and later */
  void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64);
  /* Version 3.20.0 and later */
  int (*prepare_v3)(sqlite3*,const char*,int,unsigned int,
                    sqlite3_stmt**,const char**);
  int (*prepare16_v3)(sqlite3*,const void*,int,unsigned int,
                      sqlite3_stmt**,const void**);
  int (*bind_pointer)(sqlite3_stmt*,int,void*,const char*,void(*)(void*));
  void (*result_pointer)(sqlite3_context*,void*,const char*,void(*)(void*));
  void *(*value_pointer)(sqlite3_value*,const char*);
  int (*vtab_nochange)(sqlite3_context*);
  int (*value_nochange)(sqlite3_value*);
  const char *(*vtab_collation)(sqlite3_index_info*,int);
  /* Version 3.24.0 and later */
  int (*keyword_count)(void);
  int (*keyword_name)(int,const char**,int*);
  int (*keyword_check)(const char*,int);
  sqlite3_str *(*str_new)(sqlite3*);
  char *(*str_finish)(sqlite3_str*);
  void (*str_appendf)(sqlite3_str*, const char *zFormat, ...);
  void (*str_vappendf)(sqlite3_str*, const char *zFormat, va_list);
  void (*str_append)(sqlite3_str*, const char *zIn, int N);
  void (*str_appendall)(sqlite3_str*, const char *zIn);
  void (*str_appendchar)(sqlite3_str*, int N, char C);
  void (*str_reset)(sqlite3_str*);
  int (*str_errcode)(sqlite3_str*);
  int (*str_length)(sqlite3_str*);
  char *(*str_value)(sqlite3_str*);

... fair winds and following seas ...

WORD.
